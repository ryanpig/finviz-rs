
#[allow(dead_code)]
pub enum OrderType {
    Ticker,
    Company,
    Sector,
    Industry,
    Country,
    MarketCap,
    PriceEarnings,
    ForwardPriceEarnings,
    PEG,
    PriceSales,
    PriceBook,
    PriceCash,
    PriceFreeCashFlow,
    DividendYield,
    PayoutRatio,
    EPS,
    EPSGrowthThisYear,
    EPSGrowthNextYear,
    EPSGrowthPast5Years,
    EPSGrowthNext5Years,
    SalesGrowthPast5Years,
    EPSGrowthQtrOverQtr,
    SalesGrowthQtrOverQtr,
    SharesOutstanding,
    SharesFloat,
    InsiderOwnership,
    InsiderTransactions,
    InstitutionalOwnership,
    InstitutionalTransactions,
    ShortInterestShare,
    ShortInterestRatio,
    EarningsDate,
    ReturnOnAssets,
    ReturnOnEquity,
    ReturnOnInvestment,
    CurrentRatio,
    QuickRatio,
    LTDebtEquity,
    TotalDebtEquity,
    GrossMargin,
    OperatingMargin,
    NetProfitMargin,
    AnalystRecommendation,
    PerformanceWeek,
    PerformanceMonth,
    PerformanceQuarter,
    PerformanceHalfYear,
    PerformanceYear,
    PerformanceYearToDate,
    Beta,
    AverageTrueRange,
    VolatilityWeek,
    VolatilityMonth,
    Sma20,
    Sma50,
    Sma200,
    High50Day,
    Low50Day,
    High52Week,
    Low52Week,
    RelativeStrengthIndex,
    AverageVolume3Month,
    RelativeVolume,
    Change,
    ChangeFromOpen,
    Gap,
    Volume,
    Price,
    TargetPrice,
    IPODate,
}

impl OrderType {
    pub fn to_url_string(&self) -> &str {
        match self {
            OrderType::Ticker => "o=ticker",
            OrderType::Company => "o=company",
            OrderType::Sector => "o=sector",
            OrderType::Industry => "o=industry",
            OrderType::Country => "o=country",
            OrderType::MarketCap => "o=marketcap",
            OrderType::PriceEarnings => "o=pe",
            OrderType::ForwardPriceEarnings => "o=forwardpe",
            OrderType::PEG => "o=peg",
            OrderType::PriceSales => "o=ps",
            OrderType::PriceBook => "o=pb",
            OrderType::PriceCash => "o=pc",
            OrderType::PriceFreeCashFlow => "o=pfcf",
            OrderType::DividendYield => "o=dividendyield",
            OrderType::PayoutRatio => "o=payoutratio",
            OrderType::EPS => "o=eps",
            OrderType::EPSGrowthThisYear => "o=epsyoy",
            OrderType::EPSGrowthNextYear => "o=epsyoy1",
            OrderType::EPSGrowthPast5Years => "o=eps5years",
            OrderType::EPSGrowthNext5Years => "o=estltgrowth",
            OrderType::SalesGrowthPast5Years => "o=sales5years",
            OrderType::EPSGrowthQtrOverQtr => "o=epsqoq",
            OrderType::SalesGrowthQtrOverQtr => "o=salesqoq",
            OrderType::SharesOutstanding => "o=sharesoutstanding2",
            OrderType::SharesFloat => "o=sharesfloat",
            OrderType::InsiderOwnership => "o=insiderown",
            OrderType::InsiderTransactions => "o=insidertrans",
            OrderType::InstitutionalOwnership => "o=instown",
            OrderType::InstitutionalTransactions => "o=insttrans",
            OrderType::ShortInterestShare => "o=shortinterestshare",
            OrderType::ShortInterestRatio => "o=shortinterestratio",
            OrderType::EarningsDate => "o=earningsdate",
            OrderType::ReturnOnAssets => "o=roa",
            OrderType::ReturnOnEquity => "o=roe",
            OrderType::ReturnOnInvestment => "o=roi",
            OrderType::CurrentRatio => "o=curratio",
            OrderType::QuickRatio => "o=quickratio",
            OrderType::LTDebtEquity => "o=ltdebteq",
            OrderType::TotalDebtEquity => "o=debteq",
            OrderType::GrossMargin => "o=grossmargin",
            OrderType::OperatingMargin => "o=opermargin",
            OrderType::NetProfitMargin => "o=netmargin",
            OrderType::AnalystRecommendation => "o=recom",
            OrderType::PerformanceWeek => "o=perf1w",
            OrderType::PerformanceMonth => "o=perf4w",
            OrderType::PerformanceQuarter => "o=perf13w",
            OrderType::PerformanceHalfYear => "o=perf26w",
            OrderType::PerformanceYear => "o=perf52w",
            OrderType::PerformanceYearToDate => "o=perfytd",
            OrderType::Beta => "o=beta",
            OrderType::AverageTrueRange => "o=averagetruerange",
            OrderType::VolatilityWeek => "o=volatility1w",
            OrderType::VolatilityMonth => "o=volatility4w",
            OrderType::Sma20 => "o=sma20",
            OrderType::Sma50 => "o=sma50",
            OrderType::Sma200 => "o=sma200",
            OrderType::High50Day => "o=high50d",
            OrderType::Low50Day => "o=low50d",
            OrderType::High52Week => "o=high52w",
            OrderType::Low52Week => "o=low52w",
            OrderType::RelativeStrengthIndex => "o=rsi",
            OrderType::AverageVolume3Month => "o=averagevolume",
            OrderType::RelativeVolume => "o=relativevolume",
            OrderType::Change => "o=change",
            OrderType::ChangeFromOpen => "o=changeopen",
            OrderType::Gap => "o=gap",
            OrderType::Volume => "o=volume",
            OrderType::Price => "o=price",
            OrderType::TargetPrice => "o=targetprice",
            OrderType::IPODate => "o=ipodate",
        }
    }
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_url_string_of_signal_type() {
        let t = OrderType::PerformanceWeek;
        assert_eq!(t.to_url_string(), "o=perf1w");
    }

}
